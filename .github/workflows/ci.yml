name: CI

on:
  pull_request:
  push:
    branches:
      - master
    tags:
      - "*"

jobs:
  test:
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [windows-latest, macos-latest, ubuntu-latest]
        python-version: ["3.10", "3.11", "3.12", "3.13"]
        django-version: ["4.2", "5.0", "5.1", "5.2"]
    steps:
      - uses: actions/checkout@v4
      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}
      - uses: actions/cache@v4
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-${{ matrix.python-version }}-pip-${{ hashFiles('pyproject.toml') }}
      - uses: taiki-e/install-action@just
      - name: Install dependencies
        run: |
          pip install --upgrade pip
          pip install -e '.[dev]'
          pip install Django~=${{ matrix.django-version }}
      - name: Lint
        run: just lint
      - name: Run fast tests
        if: ${{ !cancelled() }}
        run: just test-fast -v2
      - name: Run tests
        if: ${{ !cancelled() }}
        run: just test -v2

  test-postgres:
    runs-on: ubuntu-latest
    services:
      postgres:
        image: postgres:16-alpine
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
        ports:
          - 5432:5432
        options: --health-cmd pg_isready --health-interval 10s --health-timeout 5s --health-retries 5
    strategy:
      fail-fast: false
      matrix:
        django-version: ["4.2", "5.0", "5.1", "5.2"]
    steps:
      - uses: actions/checkout@v4
      - name: Set up Python 3.13
        uses: actions/setup-python@v5
        with:
          python-version: "3.13"
      - uses: actions/cache@v4
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('pyproject.toml') }}
      - uses: taiki-e/install-action@just
      - name: Install dependencies
        run: |
          pip install --upgrade pip
          pip install -e '.[dev,postgres]'
          pip install Django~=${{ matrix.django-version }}
      - name: Run tests
        run: just test -v2
        env:
          DATABASE_URL: postgres://postgres:postgres@localhost/postgres

  test-mysql:
    runs-on: ubuntu-latest
    services:
      mysql:
        image: mysql:8.4
        env:
          MYSQL_ROOT_PASSWORD: django
          MYSQL_DATABASE: django
        ports:
          - 3306:3306
    strategy:
      fail-fast: false
      matrix:
        django-version: ["4.2", "5.0", "5.1", "5.2"]
    steps:
      - uses: actions/checkout@v4
      - name: Set up Python 3.13
        uses: actions/setup-python@v5
        with:
          python-version: "3.13"
      - uses: actions/cache@v4
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('pyproject.toml') }}
      - uses: taiki-e/install-action@just
      - name: Install dependencies
        run: |
          pip install --upgrade pip
          pip install -e '.[dev,mysql]'
          pip install Django~=${{ matrix.django-version }}
      - name: Run tests
        run: just test -v2
        env:
          DATABASE_URL: mysql://root:django@127.0.0.1/django

  build:
    permissions:
      id-token: write  # IMPORTANT: this permission is mandatory for trusted publishing
    runs-on: ubuntu-latest
    needs:
      - test
      - test-postgres
      - test-mysql
    steps:
    - uses: actions/checkout@v4
      with:
        fetch-depth: 0
    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: "3.13"
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip build
    - name: Build package
      run: python -m build
    - name: Save built package
      uses: actions/upload-artifact@v4
      with:
        name: package
        path: dist
    - name: Publish to PyPi
      if: ${{ github.ref_type	== 'tag' }}
      uses: pypa/gh-action-pypi-publish@release/v1
      with:
        print-hash: true
